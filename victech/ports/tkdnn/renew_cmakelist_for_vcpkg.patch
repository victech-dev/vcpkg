From 7a2745aa335a7790c41871d51b7ecb869f0f2163 Mon Sep 17 00:00:00 2001
From: sehee <sehee>
Date: Mon, 9 Nov 2020 17:26:27 +0900
Subject: [PATCH] renew_cmakelist_for_vcpkg

---
 CMakeLists.txt | 240 +++++++++++++++++++++++++++++--------------------
 1 file changed, 145 insertions(+), 95 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8c8619d..b797e25 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,9 +1,25 @@
-cmake_minimum_required(VERSION 3.5)
+cmake_minimum_required(VERSION 3.17)
 
-project (tkDNN)
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -Wno-deprecated-declarations -Wno-unused-variable")
-include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/tkDNN)
+project (tkDNN LANGUAGES CUDA CXX)
+
+# CXX language
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+if (NOT MSVC)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations -Wno-unused-variable")
+endif()
+
+# CUDA language
+set(CMAKE_CUDA_FLAGS ${CMAKE_CUDA_FLAGS} --maxrregcount=32)
+if(BUILD_SHARED_LIBS)
+    set(CMAKE_CUDA_RUNTIME_LIBRARY "Shared")
+else()
+    set(CMAKE_CUDA_RUNTIME_LIBRARY "Static")
+endif()
+
+include_directories(
+    ${CMAKE_CURRENT_SOURCE_DIR}/include 
+    ${CMAKE_CURRENT_SOURCE_DIR}/include/tkDNN )
 
 # project specific flags
 if(DEBUG)
@@ -11,119 +27,153 @@ if(DEBUG)
 endif()
 
 add_definitions(-DTKDNN_PATH="${CMAKE_CURRENT_SOURCE_DIR}")
+if(MSVC AND BUILD_SHARED_LIBS)
+	add_definitions(-D${PROJECT_NAME}_DLL)	# use or build Windows DLL
+endif()
 
 #-------------------------------------------------------------------------------
-# CUDA
+# External Libraries
 #-------------------------------------------------------------------------------
-find_package(CUDA 9.0 REQUIRED)
-SET(CUDA_SEPARABLE_COMPILATION ON)
-#set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -arch=sm_30 --compiler-options '-fPIC'")
-set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} --maxrregcount=32)
+find_package(CUDAToolkit 9.0 REQUIRED)
+include_directories(${CUDAToolkit_INCLUDE_DIRS}) # required for jetson (why?)
 
 find_package(CUDNN REQUIRED)
-include_directories(${CUDNN_INCLUDE_DIR})
-
-
-# compile
-file(GLOB tkdnn_CUSRC "src/kernels/*.cu" "src/sorting.cu")
-cuda_include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${CUDA_INCLUDE_DIRS} ${CUDNN_INCLUDE_DIRS})
-cuda_add_library(kernels SHARED ${tkdnn_CUSRC})
+include_directories(${CUDNN_INCLUDE_DIRS})
 
+find_package(TensorRT REQUIRED)
+include_directories(${TensorRT_INCLUDE_DIRS})
 
-#-------------------------------------------------------------------------------
-# External Libraries
-#-------------------------------------------------------------------------------
 find_package(Eigen3 REQUIRED)
 include_directories(${EIGEN3_INCLUDE_DIR})
 
 find_package(OpenCV REQUIRED)
+include_directories(${OPENCV_INCLUDE_DIRS})
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCV")
 
-# gives problems in cross-compiling, probably malformed cmake config
-#find_package(yaml-cpp REQUIRED)
+find_package(yaml-cpp REQUIRED)
 
 #-------------------------------------------------------------------------------
 # Build Libraries
 #-------------------------------------------------------------------------------
 file(GLOB tkdnn_SRC "src/*.cpp")
-set(tkdnn_LIBS kernels ${CUDA_LIBRARIES} ${CUDA_CUBLAS_LIBRARIES} ${CUDNN_LIBRARIES} ${OpenCV_LIBS} yaml-cpp)
-
-set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${CUDA_INCLUDE_DIRS} ${OPENCV_INCLUDE_DIRS} ${NVINFER_INCLUDES})
-add_library(tkDNN SHARED ${tkdnn_SRC})
-target_link_libraries(tkDNN ${tkdnn_LIBS})
-
-#static 
-#add_library(tkDNN_static STATIC ${tkdnn_SRC})
-#target_link_libraries(tkDNN_static ${tkdnn_LIBS})
-
-# SMALL NETS
-add_executable(test_simple tests/simple/test_simple.cpp)
-target_link_libraries(test_simple tkDNN)
-
-add_executable(test_mnist tests/mnist/test_mnist.cpp)
-target_link_libraries(test_mnist tkDNN)
-
-add_executable(test_mnistRT tests/mnist/test_mnistRT.cpp)
-target_link_libraries(test_mnistRT tkDNN)
-
-add_executable(test_imuodom tests/imuodom/imuodom.cpp)
-target_link_libraries(test_imuodom tkDNN)
-
-# DARKNET
-file(GLOB darknet_SRC "tests/darknet/*.cpp")
-foreach(test_SRC ${darknet_SRC})
-    get_filename_component(test_NAME "${test_SRC}" NAME_WE)
-    set(test_NAME test_${test_NAME})
-    add_executable(${test_NAME} ${test_SRC})
-    target_link_libraries(${test_NAME} tkDNN)
-endforeach()
-
-# MOBILENET
-add_executable(test_mobilenetv2ssd tests/mobilenet/mobilenetv2ssd/mobilenetv2ssd.cpp)
-target_link_libraries(test_mobilenetv2ssd tkDNN)
-
-add_executable(test_bdd-mobilenetv2ssd tests/mobilenet/bdd-mobilenetv2ssd/bdd-mobilenetv2ssd.cpp)
-target_link_libraries(test_bdd-mobilenetv2ssd tkDNN)
-
-add_executable(test_mobilenetv2ssd512 tests/mobilenet/mobilenetv2ssd512/mobilenetv2ssd512.cpp)
-target_link_libraries(test_mobilenetv2ssd512 tkDNN)
-
-# BACKBONES
-add_executable(test_resnet101 tests/backbones/resnet101/resnet101.cpp)
-target_link_libraries(test_resnet101 tkDNN)
-
-add_executable(test_dla34 tests/backbones/dla34/dla34.cpp)
-target_link_libraries(test_dla34 tkDNN)
-
-# CENTERNET
-add_executable(test_resnet101_cnet tests/centernet/resnet101_cnet/resnet101_cnet.cpp)
-target_link_libraries(test_resnet101_cnet tkDNN)
-
-add_executable(test_dla34_cnet tests/centernet/dla34_cnet/dla34_cnet.cpp)
-target_link_libraries(test_dla34_cnet tkDNN)
+file(GLOB tkdnn_CUSRC "src/kernels/*.cu" "src/sorting.cu")
+set(tkdnn_LIBS cuda cublas CuDNN::CuDNN ${OpenCV_LIBS} TensorRT::TensorRT yaml-cpp)
 
-# DEMOS
-add_executable(test_rtinference tests/test_rtinference/rtinference.cpp)
-target_link_libraries(test_rtinference tkDNN)
+add_library(tkDNN ${tkdnn_SRC} ${tkdnn_CUSRC})
+set_target_properties(tkDNN PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
+target_link_libraries(tkDNN PUBLIC ${tkdnn_LIBS})
 
-add_executable(map_demo demo/demo/map.cpp)
-target_link_libraries(map_demo tkDNN)
+if(DEBUG)
+    message(STATUS "build test and demo only in RELEASE")
+else()
+    # VICTECH : only build yolo4 related
+    add_executable(test_yolo4 tests/darknet/yolo4.cpp)
+    target_link_libraries(test_yolo4 PRIVATE CUDA::cudart tkDNN)
+    install(TARGETS test_yolo4 DESTINATION tools/tkdnn)
+    add_executable(test_yolo4tiny tests/darknet/yolo4tiny.cpp)
+    target_link_libraries(test_yolo4tiny PRIVATE CUDA::cudart tkDNN)
+    install(TARGETS test_yolo4tiny DESTINATION tools/tkdnn)
+endif()
 
-add_executable(demo demo/demo/demo.cpp)
-target_link_libraries(demo tkDNN)
+## SMALL NETS
+#add_executable(test_simple tests/simple/test_simple.cpp)
+#target_link_libraries(test_simple tkDNN)
+#install(TARGETS test_simple DESTINATION tools/tkdnn)
+
+#add_executable(test_mnist tests/mnist/test_mnist.cpp)
+#target_link_libraries(test_mnist tkDNN)
+#install(TARGETS test_mnist DESTINATION tools/tkdnn)
+
+#add_executable(test_mnistRT tests/mnist/test_mnistRT.cpp)
+#target_link_libraries(test_mnistRT tkDNN)
+#install(TARGETS test_mnistRT DESTINATION tools/tkdnn)
+
+#add_executable(test_imuodom tests/imuodom/imuodom.cpp)
+#target_link_libraries(test_imuodom tkDNN)
+#install(TARGETS test_imuodom DESTINATION tools/tkdnn)
+
+## DARKNET
+#file(GLOB darknet_SRC "tests/darknet/*.cpp")
+#foreach(test_SRC ${darknet_SRC})
+#    get_filename_component(test_NAME "${test_SRC}" NAME_WE)
+#    set(test_NAME test_${test_NAME})
+#    add_executable(${test_NAME} ${test_SRC})
+#    target_link_libraries(${test_NAME} tkDNN)
+#    install(TARGETS ${test_NAME} DESTINATION tools/tkdnn)
+#endforeach()
+
+## MOBILENET
+#add_executable(test_mobilenetv2ssd tests/mobilenet/mobilenetv2ssd/mobilenetv2ssd.cpp)
+#target_link_libraries(test_mobilenetv2ssd tkDNN)
+#install(TARGETS test_mobilenetv2ssd DESTINATION tools/tkdnn)
+
+#add_executable(test_bdd-mobilenetv2ssd tests/mobilenet/bdd-mobilenetv2ssd/bdd-mobilenetv2ssd.cpp)
+#target_link_libraries(test_bdd-mobilenetv2ssd tkDNN)
+#install(TARGETS test_bdd-mobilenetv2ssd DESTINATION tools/tkdnn)
+
+#add_executable(test_mobilenetv2ssd512 tests/mobilenet/mobilenetv2ssd512/mobilenetv2ssd512.cpp)
+#target_link_libraries(test_mobilenetv2ssd512 tkDNN)
+#install(TARGETS test_mobilenetv2ssd512 DESTINATION tools/tkdnn)
+
+## BACKBONES
+#add_executable(test_resnet101 tests/backbones/resnet101/resnet101.cpp)
+#target_link_libraries(test_resnet101 tkDNN)
+#install(TARGETS test_resnet101 DESTINATION tools/tkdnn)
+
+#add_executable(test_dla34 tests/backbones/dla34/dla34.cpp)
+#target_link_libraries(test_dla34 tkDNN)
+#install(TARGETS test_dla34 DESTINATION tools/tkdnn)
+
+## CENTERNET
+#add_executable(test_resnet101_cnet tests/centernet/resnet101_cnet/resnet101_cnet.cpp)
+#target_link_libraries(test_resnet101_cnet tkDNN)
+#install(TARGETS test_resnet101_cnet DESTINATION tools/tkdnn)
+
+#add_executable(test_dla34_cnet tests/centernet/dla34_cnet/dla34_cnet.cpp)
+#target_link_libraries(test_dla34_cnet tkDNN)
+#install(TARGETS test_dla34_cnet DESTINATION tools/tkdnn)
+
+## DEMOS
+#add_executable(test_rtinference tests/test_rtinference/rtinference.cpp)
+#target_link_libraries(test_rtinference tkDNN)
+#install(TARGETS test_rtinference DESTINATION tools/tkdnn)
+
+#add_executable(map_demo demo/demo/map.cpp)
+#target_link_libraries(map_demo tkDNN)
+#install(TARGETS map_demo DESTINATION tools/tkdnn)
+
+#add_executable(demo demo/demo/demo.cpp)
+#target_link_libraries(demo tkDNN)
+#install(TARGETS demo DESTINATION tools/tkdnn)
 
 #-------------------------------------------------------------------------------
 # Install
 #-------------------------------------------------------------------------------
-#if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
-#    set (CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" 
-#         CACHE PATH "default install path" FORCE)
-#endif()
-message("install dir:" ${CMAKE_INSTALL_PREFIX})
-install(DIRECTORY include/ DESTINATION include/)
-install(TARGETS tkDNN kernels DESTINATION lib)
-install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/cmake/" # source directory
-        DESTINATION "share/tkDNN/cmake/" # target directory
+message("tkDNN install dir:" ${CMAKE_INSTALL_PREFIX})
+
+install(
+    DIRECTORY include/ 
+    DESTINATION include/)
+install(
+    #TARGETS tkDNN kernels 
+    TARGETS tkDNN
+    EXPORT tkDNNTargets 
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib)
+install(
+    EXPORT tkDNNTargets 
+    NAMESPACE tkDNN:: 
+    FILE tkDNNTargets.cmake 
+    DESTINATION share/tkdnn)
+
+set(PACKAGE_VERSION 0.5.1)
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+    tkDNNConfigVersion.cmake
+    VERSION ${PACKAGE_VERSION}
+    COMPATIBILITY AnyNewerVersion)
+install(FILES
+  "${PROJECT_BINARY_DIR}/tkDNNConfigVersion.cmake"
+  DESTINATION share/tkdnn
 )
-
-- 
2.17.1

